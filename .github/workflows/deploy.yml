name: CI & Deploy (Backend + Frontend)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: oferikog/unicorn-app:latest
  FRONTEND_DIR: apps/web
  BACKEND_DIR: apps/api
  VITE_API_URL: https://api.myunicorn.pw

concurrency:
  group: deploy-main
  cancel-in-progress: false

jobs:
  backend_ci:
    name: Backend CI (lint + tests)
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: unicorn_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test -d unicorn_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
    env:
      DATABASE_URL: postgresql+asyncpg://test:test@postgres:5432/unicorn_test
      SECRET_KEY: test-secret-key
      # For notification tests
      NOTIF_WINDOW_SECONDS: 1
      NOTIF_SUPPRESS_MINUTES: 1
      NOTIF_WORKER_POLL_MS: 1000
      # For email settings
      RESEND_API_KEY: ""
      FROM_EMAIL: ""
      FROM_NAME: "Test Notifications"
      FRONTEND_URL: "http://localhost:5173"
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
            pip install poetry
            poetry install --no-interaction --no-root

      - name: Lint
        run: poetry run ruff check .

      - name: Tests
        run: poetry run pytest -q

  frontend_ci:
    name: Frontend CI (lint + tests + build)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/pnpm-lock.yaml

      - name: Install deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm install --frozen-lockfile

      - name: Lint
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm run lint:check

      - name: Tests
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm run test -- --ci --run

      - name: Build
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm run build

  backend_deploy:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    needs: [backend_ci, frontend_ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker image
        run: |
          docker buildx build \
            --platform linux/arm64,linux/amd64 \
            -t $DOCKER_IMAGE \
            --push \
            --cache-from=type=gha \
            --cache-to=type=gha,mode=max \
            -f $BACKEND_DIR/Dockerfile .

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            DOCKER_IMAGE=oferikog/unicorn-app:latest

            export AWS_DEFAULT_REGION=eu-central-1

            docker network create unicorn-net || true

            docker stop app notification_worker redis || true
            docker rm -f app notification_worker redis || true

            docker pull "$DOCKER_IMAGE"

            DATABASE_URL=$(aws ssm get-parameter \
              --name /app/unicorn/db-url \
              --with-decryption \
              --query Parameter.Value \
              --output text)

            REDIS_URL=$(aws ssm get-parameter \
              --name /app/unicorn/redis-url \
              --with-decryption \
              --query Parameter.Value \
              --output text)

            CORS_ORIGINS=$(aws ssm get-parameter \
              --name /app/unicorn/cors-origins \
              --query Parameter.Value \
              --output text)

            CLOUDINARY_CLOUD_NAME=$(aws ssm get-parameter \
              --name /app/unicorn/cloudinary-cloud-name \
              --query Parameter.Value \
              --output text)

            CLOUDINARY_FOLDER=$(aws ssm get-parameter \
              --name /app/unicorn/cloudinary-folder \
              --query Parameter.Value \
              --output text)

            CLOUDINARY_BASE=$(aws ssm get-parameter \
              --name /app/unicorn/cloudinary-base \
              --query Parameter.Value \
              --output text)

            JWT_SECRET=$(aws ssm get-parameter \
              --name /app/unicorn/jwt-secret \
              --with-decryption \
              --query Parameter.Value \
              --output text)

            NOTIF_WINDOW_SECONDS=$(aws ssm get-parameter \
              --name /app/unicorn/notif-window-seconds \
              --query Parameter.Value \
              --output text)

            NOTIF_SUPPRESS_MINUTES=$(aws ssm get-parameter \
              --name /app/unicorn/notif-suppress-minutes \
              --query Parameter.Value \
              --output text)

            NOTIF_WORKER_POLL_MS=$(aws ssm get-parameter \
              --name /app/unicorn/notif-worker-poll-ms \
              --query Parameter.Value \
              --output text)

            RESEND_API_KEY=$(aws ssm get-parameter \
              --name /app/unicorn/resend-api-key \
              --with-decryption \
              --query Parameter.Value \
              --output text)

            FROM_EMAIL=$(aws ssm get-parameter \
              --name /app/unicorn/from-email \
              --query Parameter.Value \
              --output text)

            FROM_NAME=$(aws ssm get-parameter \
              --name /app/unicorn/from-name \
              --query Parameter.Value \
              --output text)

            FRONTEND_URL=$(aws ssm get-parameter \
              --name /app/unicorn/frontend-url \
              --query Parameter.Value \
              --output text)

            test -n "$DATABASE_URL"
            test -n "$REDIS_URL"
            test -n "$CORS_ORIGINS"
            test -n "$CLOUDINARY_CLOUD_NAME"
            test -n "$CLOUDINARY_FOLDER"
            test -n "$CLOUDINARY_BASE"
            test -n "$JWT_SECRET"
            test -n "$NOTIF_WINDOW_SECONDS"
            test -n "$NOTIF_SUPPRESS_MINUTES"
            test -n "$NOTIF_WORKER_POLL_MS"
            test -n "$RESEND_API_KEY"
            test -n "$FROM_EMAIL"
            test -n "$FROM_NAME"
            test -n "$FRONTEND_URL"

            docker run -d --name redis \
              --restart unless-stopped \
              --network unicorn-net \
              -p 6379:6379 \
              redis:alpine redis-server --loglevel warning

            docker run -d --name app \
              --restart unless-stopped \
              --network unicorn-net \
              -e DATABASE_URL="$DATABASE_URL" \
              -e REDIS_URL="$REDIS_URL" \
              -e CORS_ORIGINS="$CORS_ORIGINS" \
              -e CLOUDINARY_CLOUD_NAME="$CLOUDINARY_CLOUD_NAME" \
              -e CLOUDINARY_FOLDER="$CLOUDINARY_FOLDER" \
              -e CLOUDINARY_BASE="$CLOUDINARY_BASE" \
              -e SECRET_KEY="$JWT_SECRET" \
              -e NOTIF_WINDOW_SECONDS="$NOTIF_WINDOW_SECONDS" \
              -e NOTIF_SUPPRESS_MINUTES="$NOTIF_SUPPRESS_MINUTES" \
              -e NOTIF_WORKER_POLL_MS="$NOTIF_WORKER_POLL_MS" \
              -e RESEND_API_KEY="$RESEND_API_KEY" \
              -e FROM_EMAIL="$FROM_EMAIL" \
              -e FROM_NAME="$FROM_NAME" \
              -e FRONTEND_URL="$FRONTEND_URL" \
              -p 8000:8000 \
              "$DOCKER_IMAGE"

            docker run -d --name notification_worker \
              --restart unless-stopped \
              --network unicorn-net \
              -e DATABASE_URL="$DATABASE_URL" \
              -e REDIS_URL="$REDIS_URL" \
              -e SECRET_KEY="$JWT_SECRET" \
              -e NOTIF_WINDOW_SECONDS="$NOTIF_WINDOW_SECONDS" \
              -e NOTIF_SUPPRESS_MINUTES="$NOTIF_SUPPRESS_MINUTES" \
              -e NOTIF_WORKER_POLL_MS="$NOTIF_WORKER_POLL_MS" \
              -e RESEND_API_KEY="$RESEND_API_KEY" \
              -e FROM_EMAIL="$FROM_EMAIL" \
              -e FROM_NAME="$FROM_NAME" \
              -e FRONTEND_URL="$FRONTEND_URL" \
              "$DOCKER_IMAGE" python -m app.notification.worker


      - name: Copy Nginx config
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "infra/nginx/nginx.conf"
          target: "/home/ec2-user/"
          strip_components: 2

      - name: Restart Nginx container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker stop nginx || true && docker rm nginx || true
            docker run -d --name nginx \
              --restart unless-stopped \
              --network unicorn-net \
              -p 80:80 -p 443:443 \
              -v /home/ec2-user/nginx.conf:/etc/nginx/nginx.conf:ro \
              -v ~/ssl:/etc/nginx/ssl:ro \
              nginx:alpine

  frontend_deploy:
    name: Deploy Frontend to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [backend_deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/pnpm-lock.yaml

      - name: Install deps
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm install --frozen-lockfile

      - name: Prepare production env
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "VITE_API_URL=${{ env.VITE_API_URL }}" > .env.production

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: unicorn-frontend
          directory: ${{ env.FRONTEND_DIR }}/dist
          branch: main
