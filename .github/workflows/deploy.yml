name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  deployments: write

env:
  DOCKER_IMAGE: oferikog/unicorn-app
  FRONTEND_DIR: apps/web
  BACKEND_DIR: apps/api
  VITE_API_URL: https://api.myunicorn.pw
  REGISTRY: docker.io

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  backend_ci:
    name: Backend CI
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: unicorn_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test -d unicorn_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://test:test@localhost:5432/unicorn_test
      REDIS_URL: redis://localhost:6379/0
      SECRET_KEY: test-secret-key-for-ci-only
      ENVIRONMENT: test
      NOTIF_WINDOW_SECONDS: 1
      NOTIF_SUPPRESS_MINUTES: 1
      NOTIF_WORKER_POLL_MS: 1000
      RESEND_API_KEY: test-key
      FROM_EMAIL: test@example.com
      FROM_NAME: Test Notifications
      FRONTEND_URL: http://localhost:5173
      EMAIL_ENABLED: false
      CLOUDINARY_CLOUD_NAME: test
      CLOUDINARY_FOLDER: test
      CLOUDINARY_BASE: test.png
      CORS_ORIGINS: http://localhost:5173

    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: Install Poetry
        run: |
          pip install --upgrade pip
          pip install poetry==1.7.1

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Lint
        run: poetry run ruff check .

      - name: Type check
        continue-on-error: true
        run: poetry run mypy .

      - name: Run migrations
        run: poetry run alembic upgrade head

      - name: Run tests
        run: |
          poetry run pytest \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --verbose

      - name: Upload coverage
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v4
        continue-on-error: true
        with:
          files: ./apps/api/coverage.xml
          flags: backend
          fail_ci_if_error: false

  frontend_ci:
    name: Frontend CI
    runs-on: ubuntu-latest
    timeout-minutes: 15

    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm run lint:check

      - name: Type check
        continue-on-error: true
        run: pnpm run lint:check

      - name: Run tests
        run: pnpm run test -- --ci --run --coverage

      - name: Build
        run: pnpm run build

      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: ${{ env.FRONTEND_DIR }}/dist
          retention-days: 1

  build_docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [backend_ci, frontend_ci]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=sha,prefix=main-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.BACKEND_DIR }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            GIT_COMMIT=${{ github.sha }}
          target: production

  deploy_backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [build_docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 15
    environment:
      name: production
      url: https://api.myunicorn.pw

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "infra/docker-compose.prod.yaml,infra/docker-compose.observability.yaml,infra/scripts/deploy.sh,infra/nginx/nginx.conf,infra/observability"
          target: "/home/ec2-user/"
          strip_components: 1
          overwrite: true

      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE }}:latest
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DOCKER_IMAGE
          command_timeout: 10m
          script: |
            set -e

            mkdir -p /home/ec2-user/scripts /home/ec2-user/nginx

            if [ -f /home/ec2-user/deploy.sh ]; then
              mv /home/ec2-user/deploy.sh /home/ec2-user/scripts/
            fi

            if [ -f /home/ec2-user/nginx.conf ]; then
              mv /home/ec2-user/nginx.conf /home/ec2-user/nginx/
            fi

            chmod +x /home/ec2-user/scripts/deploy.sh
            /home/ec2-user/scripts/deploy.sh

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sleep 10

            for i in {1..5}; do
              if docker exec unicorn-app curl -f -s http://localhost:8000/api/v1/health > /dev/null; then
                echo "Deployment successful"
                exit 0
              fi
              echo "Health check attempt $i failed, retrying..."
              sleep 5
            done

            echo "Deployment verification failed"
            docker-compose -f /home/ec2-user/docker-compose.prod.yaml logs app --tail 50
            exit 1

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker-compose -f /home/ec2-user/docker-compose.prod.yaml logs --tail 100
            docker-compose -f /home/ec2-user/docker-compose.prod.yaml restart

  deploy_frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [deploy_backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 10
    environment:
      name: production
      url: https://myunicorn.pw

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          cache-dependency-path: ${{ env.FRONTEND_DIR }}/pnpm-lock.yaml

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm install --frozen-lockfile

      - name: Create environment file
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          echo "VITE_API_URL=${{ env.VITE_API_URL }}" > .env.production
          echo "VITE_ENVIRONMENT=production" >> .env.production

      - name: Build
        working-directory: ${{ env.FRONTEND_DIR }}
        run: pnpm run build

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: unicorn-frontend
          directory: ${{ env.FRONTEND_DIR }}/dist
          branch: main
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify deployment
        run: |
          sleep 15

          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://myunicorn.pw)
          if [ "$STATUS" = "200" ]; then
            echo "Frontend deployment successful"
          else
            echo "Frontend deployment verification failed (HTTP $STATUS)"
            exit 1
          fi

  deployment_summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy_backend, deploy_frontend]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Generate summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Services" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy_backend.result }}" == "success" ]; then
            echo "- ✅ Backend API: https://api.myunicorn.pw" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Backend: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.deploy_frontend.result }}" == "success" ]; then
            echo "- ✅ Frontend: https://myunicorn.pw" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ Frontend: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- [API Health](https://api.myunicorn.pw/api/v1/health)" >> $GITHUB_STEP_SUMMARY
          echo "- [Application](https://myunicorn.pw)" >> $GITHUB_STEP_SUMMARY
          echo "- [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
